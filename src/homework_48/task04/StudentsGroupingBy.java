package homework_48.task04;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @author Vasilii Serebrovskii
 * @version 1.0 (03.04.2025)
 */
/*
–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (List) ‚Äî –º–∏–Ω–∏–º—É–º 10 –æ–±—ä–µ–∫—Ç–æ–≤, —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

–ó–∞–¥–∞–Ω–∏—è:
1 –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ major) –≤ Map<String, List>.

2 –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É (year), –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Ö –≤ –≤–∏–¥–µ Set.

3 –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, Long>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

4 –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, Double>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

5 –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–ü–æ—Å—Ç—Ä–æ–π Map<String, List>, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

6 –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
–ò—Å–ø–æ–ª—å–∑—É–π IntSummaryStatistics, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:

 6.1 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
 6.2 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
 6.3 —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç,
 6.4 –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤,
 6.5 —Å—É–º–º—É –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    –í—Å—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ main().
    –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å toString() –≤ –∫–ª–∞—Å—Å Student –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
    –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stream API –∏ Collectors –∫–∞–∫ –Ω–∞ —É—Ä–æ–∫–µ.
üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

7 –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ‚Üí Map<Integer, Map<String, List>>
 */
public class StudentsGroupingBy {
    public static void main(String[] args) {

        List<Student> students = new ArrayList<>(List.of(
                new Student("Alex", 20, "–∏–Ω–∂–µ–Ω–µ—Ä", 2, 3.35),
                new Student("Max", 19, "—Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞", 1, 3.95),
                new Student("Katia", 22, "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 3, 5.00),
                new Student("Michael", 21, "—Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞", 2, 3.75),
                new Student("Peter", 23, "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 3, 4.35),
                new Student("Sofia", 20, "–∏–Ω–∂–µ–Ω–µ—Ä", 1, 4.95),
                new Student("Elena", 19, "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 1, 4.25),
                new Student("Anna", 23, "–∏–Ω–∂–µ–Ω–µ—Ä", 3, 4.05),
                new Student("Bob", 23, "—Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞", 3, 4.35),
                new Student("Hanna", 20, "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 2, 3.35)
        ));

        //students.forEach(System.out::println);

        //1 –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Map<String, List<Student>> majorMap = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor));
        System.out.println("=== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===");
        printMap(majorMap);

        //2 –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set
        Map<Integer, Set<Student>> yearSetMap = students.stream()
                .collect(Collectors.groupingBy(Student::getYear, Collectors.toSet()));

        System.out.println("=== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set ===");
        printMap(yearSetMap);

        //3 –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        Map<String, Long> countingStudents = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.counting()));
        System.out.println("=== –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===");
        printMap(countingStudents);

        //4 –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        Map<String, Double> majorAveraging = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.averagingDouble(Student::getGrade)));

        System.out.println("=== –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===");
        printMap(majorAveraging);

        //5 –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        Map<String, List<Double>> majorGrades = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.mapping(Student::getGrade, Collectors.toList())));

        System.out.println("=== –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===");
        printMap(majorGrades);

        //6 –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        DoubleSummaryStatistics yearStatistics = students.stream()
                .collect(Collectors.summarizingDouble(Student::getAge));

        System.out.println("========== –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ==========");
        System.out.println("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: " + yearStatistics.getMin());
        System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: " + yearStatistics.getMax());
        System.out.println("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: " + yearStatistics.getAverage());
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: " + yearStatistics.getCount());
        System.out.println("–°—É–º–º–∞ –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤: " + yearStatistics.getSum());

        //7 –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ‚Üí Map<Integer, Map<String, List>>
        Map<Integer, Map<String, List<Student>>> yearGradeeDoubleMap = students.stream()
                .collect(Collectors.groupingBy(Student::getYear, Collectors.groupingBy(Student::getMajor, Collectors.toList())));

        System.out.println("\n=== –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===\n");


        yearGradeeDoubleMap.forEach((year, secondMap) -> {
            System.out.println("=== –ì–æ–¥: " + year + " ===============================================");
            secondMap.forEach((major, studentList) -> {
                System.out.println("  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: " + major);
                studentList.forEach(student -> System.out.println("    " + student));
                System.out.println("----------------------------------------------------------");
            });
            System.out.println("==========================================================");
        });

    }

    // –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    private static <K, V> void printMap(Map<K, V> map) {
        map.forEach((K, V) -> System.out.println(K + " : " + V));
        System.out.println("===============\n");
    }


}
